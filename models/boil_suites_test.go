// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Airports", testAirports)
	t.Run("Cities", testCities)
	t.Run("Comments", testComments)
	t.Run("Routes", testRoutes)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Airports", testAirportsDelete)
	t.Run("Cities", testCitiesDelete)
	t.Run("Comments", testCommentsDelete)
	t.Run("Routes", testRoutesDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Airports", testAirportsQueryDeleteAll)
	t.Run("Cities", testCitiesQueryDeleteAll)
	t.Run("Comments", testCommentsQueryDeleteAll)
	t.Run("Routes", testRoutesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Airports", testAirportsSliceDeleteAll)
	t.Run("Cities", testCitiesSliceDeleteAll)
	t.Run("Comments", testCommentsSliceDeleteAll)
	t.Run("Routes", testRoutesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Airports", testAirportsExists)
	t.Run("Cities", testCitiesExists)
	t.Run("Comments", testCommentsExists)
	t.Run("Routes", testRoutesExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Airports", testAirportsFind)
	t.Run("Cities", testCitiesFind)
	t.Run("Comments", testCommentsFind)
	t.Run("Routes", testRoutesFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Airports", testAirportsBind)
	t.Run("Cities", testCitiesBind)
	t.Run("Comments", testCommentsBind)
	t.Run("Routes", testRoutesBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Airports", testAirportsOne)
	t.Run("Cities", testCitiesOne)
	t.Run("Comments", testCommentsOne)
	t.Run("Routes", testRoutesOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Airports", testAirportsAll)
	t.Run("Cities", testCitiesAll)
	t.Run("Comments", testCommentsAll)
	t.Run("Routes", testRoutesAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Airports", testAirportsCount)
	t.Run("Cities", testCitiesCount)
	t.Run("Comments", testCommentsCount)
	t.Run("Routes", testRoutesCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Airports", testAirportsHooks)
	t.Run("Cities", testCitiesHooks)
	t.Run("Comments", testCommentsHooks)
	t.Run("Routes", testRoutesHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Airports", testAirportsInsert)
	t.Run("Airports", testAirportsInsertWhitelist)
	t.Run("Cities", testCitiesInsert)
	t.Run("Cities", testCitiesInsertWhitelist)
	t.Run("Comments", testCommentsInsert)
	t.Run("Comments", testCommentsInsertWhitelist)
	t.Run("Routes", testRoutesInsert)
	t.Run("Routes", testRoutesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("AirportToCityUsingCity", testAirportToOneCityUsingCity)
	t.Run("CommentToUserUsingPoster", testCommentToOneUserUsingPoster)
	t.Run("CommentToCityUsingCity", testCommentToOneCityUsingCity)
	t.Run("RouteToAirportUsingDestination", testRouteToOneAirportUsingDestination)
	t.Run("RouteToAirportUsingSource", testRouteToOneAirportUsingSource)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("AirportToDestinationRoutes", testAirportToManyDestinationRoutes)
	t.Run("AirportToSourceRoutes", testAirportToManySourceRoutes)
	t.Run("CityToAirports", testCityToManyAirports)
	t.Run("CityToComments", testCityToManyComments)
	t.Run("UserToPosterComments", testUserToManyPosterComments)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("AirportToCityUsingAirports", testAirportToOneSetOpCityUsingCity)
	t.Run("CommentToUserUsingPosterComments", testCommentToOneSetOpUserUsingPoster)
	t.Run("CommentToCityUsingComments", testCommentToOneSetOpCityUsingCity)
	t.Run("RouteToAirportUsingDestinationRoutes", testRouteToOneSetOpAirportUsingDestination)
	t.Run("RouteToAirportUsingSourceRoutes", testRouteToOneSetOpAirportUsingSource)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("AirportToDestinationRoutes", testAirportToManyAddOpDestinationRoutes)
	t.Run("AirportToSourceRoutes", testAirportToManyAddOpSourceRoutes)
	t.Run("CityToAirports", testCityToManyAddOpAirports)
	t.Run("CityToComments", testCityToManyAddOpComments)
	t.Run("UserToPosterComments", testUserToManyAddOpPosterComments)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Airports", testAirportsReload)
	t.Run("Cities", testCitiesReload)
	t.Run("Comments", testCommentsReload)
	t.Run("Routes", testRoutesReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Airports", testAirportsReloadAll)
	t.Run("Cities", testCitiesReloadAll)
	t.Run("Comments", testCommentsReloadAll)
	t.Run("Routes", testRoutesReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Airports", testAirportsSelect)
	t.Run("Cities", testCitiesSelect)
	t.Run("Comments", testCommentsSelect)
	t.Run("Routes", testRoutesSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Airports", testAirportsUpdate)
	t.Run("Cities", testCitiesUpdate)
	t.Run("Comments", testCommentsUpdate)
	t.Run("Routes", testRoutesUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Airports", testAirportsSliceUpdateAll)
	t.Run("Cities", testCitiesSliceUpdateAll)
	t.Run("Comments", testCommentsSliceUpdateAll)
	t.Run("Routes", testRoutesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
