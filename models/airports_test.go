// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAirports(t *testing.T) {
	t.Parallel()

	query := Airports()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAirportsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Airports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAirportsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Airports().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Airports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAirportsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AirportSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Airports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAirportsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AirportExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Airport exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AirportExists to return true, but got false.")
	}
}

func testAirportsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	airportFound, err := FindAirport(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if airportFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAirportsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Airports().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAirportsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Airports().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAirportsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	airportOne := &Airport{}
	airportTwo := &Airport{}
	if err = randomize.Struct(seed, airportOne, airportDBTypes, false, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}
	if err = randomize.Struct(seed, airportTwo, airportDBTypes, false, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = airportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = airportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Airports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAirportsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	airportOne := &Airport{}
	airportTwo := &Airport{}
	if err = randomize.Struct(seed, airportOne, airportDBTypes, false, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}
	if err = randomize.Struct(seed, airportTwo, airportDBTypes, false, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = airportOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = airportTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Airports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func airportBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Airport) error {
	*o = Airport{}
	return nil
}

func airportAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Airport) error {
	*o = Airport{}
	return nil
}

func airportAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Airport) error {
	*o = Airport{}
	return nil
}

func airportBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Airport) error {
	*o = Airport{}
	return nil
}

func airportAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Airport) error {
	*o = Airport{}
	return nil
}

func airportBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Airport) error {
	*o = Airport{}
	return nil
}

func airportAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Airport) error {
	*o = Airport{}
	return nil
}

func airportBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Airport) error {
	*o = Airport{}
	return nil
}

func airportAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Airport) error {
	*o = Airport{}
	return nil
}

func testAirportsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Airport{}
	o := &Airport{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, airportDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Airport object: %s", err)
	}

	AddAirportHook(boil.BeforeInsertHook, airportBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	airportBeforeInsertHooks = []AirportHook{}

	AddAirportHook(boil.AfterInsertHook, airportAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	airportAfterInsertHooks = []AirportHook{}

	AddAirportHook(boil.AfterSelectHook, airportAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	airportAfterSelectHooks = []AirportHook{}

	AddAirportHook(boil.BeforeUpdateHook, airportBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	airportBeforeUpdateHooks = []AirportHook{}

	AddAirportHook(boil.AfterUpdateHook, airportAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	airportAfterUpdateHooks = []AirportHook{}

	AddAirportHook(boil.BeforeDeleteHook, airportBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	airportBeforeDeleteHooks = []AirportHook{}

	AddAirportHook(boil.AfterDeleteHook, airportAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	airportAfterDeleteHooks = []AirportHook{}

	AddAirportHook(boil.BeforeUpsertHook, airportBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	airportBeforeUpsertHooks = []AirportHook{}

	AddAirportHook(boil.AfterUpsertHook, airportAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	airportAfterUpsertHooks = []AirportHook{}
}

func testAirportsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Airports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAirportsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(airportColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Airports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAirportToManyDestinationRoutes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Airport
	var b, c Route

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.DestinationID = a.ID
	c.DestinationID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.DestinationRoutes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.DestinationID == b.DestinationID {
			bFound = true
		}
		if v.DestinationID == c.DestinationID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AirportSlice{&a}
	if err = a.L.LoadDestinationRoutes(ctx, tx, false, (*[]*Airport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DestinationRoutes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.DestinationRoutes = nil
	if err = a.L.LoadDestinationRoutes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.DestinationRoutes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAirportToManySourceRoutes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Airport
	var b, c Route

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, routeDBTypes, false, routeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.SourceID = a.ID
	c.SourceID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.SourceRoutes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.SourceID == b.SourceID {
			bFound = true
		}
		if v.SourceID == c.SourceID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AirportSlice{&a}
	if err = a.L.LoadSourceRoutes(ctx, tx, false, (*[]*Airport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SourceRoutes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SourceRoutes = nil
	if err = a.L.LoadSourceRoutes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SourceRoutes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testAirportToManyAddOpDestinationRoutes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Airport
	var b, c, d, e Route

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, airportDBTypes, false, strmangle.SetComplement(airportPrimaryKeyColumns, airportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Route{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Route{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddDestinationRoutes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.DestinationID {
			t.Error("foreign key was wrong value", a.ID, first.DestinationID)
		}
		if a.ID != second.DestinationID {
			t.Error("foreign key was wrong value", a.ID, second.DestinationID)
		}

		if first.R.Destination != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Destination != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.DestinationRoutes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.DestinationRoutes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.DestinationRoutes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAirportToManyAddOpSourceRoutes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Airport
	var b, c, d, e Route

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, airportDBTypes, false, strmangle.SetComplement(airportPrimaryKeyColumns, airportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Route{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, routeDBTypes, false, strmangle.SetComplement(routePrimaryKeyColumns, routeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Route{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSourceRoutes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.SourceID {
			t.Error("foreign key was wrong value", a.ID, first.SourceID)
		}
		if a.ID != second.SourceID {
			t.Error("foreign key was wrong value", a.ID, second.SourceID)
		}

		if first.R.Source != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Source != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SourceRoutes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SourceRoutes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SourceRoutes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAirportToOneCityUsingCity(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Airport
	var foreign City

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, airportDBTypes, false, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cityDBTypes, false, cityColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize City struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.CityID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.City().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AirportSlice{&local}
	if err = local.L.LoadCity(ctx, tx, false, (*[]*Airport)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.City == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.City = nil
	if err = local.L.LoadCity(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.City == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAirportToOneSetOpCityUsingCity(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Airport
	var b, c City

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, airportDBTypes, false, strmangle.SetComplement(airportPrimaryKeyColumns, airportColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cityDBTypes, false, strmangle.SetComplement(cityPrimaryKeyColumns, cityColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*City{&b, &c} {
		err = a.SetCity(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.City != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Airports[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.CityID != x.ID {
			t.Error("foreign key was wrong value", a.CityID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CityID))
		reflect.Indirect(reflect.ValueOf(&a.CityID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.CityID != x.ID {
			t.Error("foreign key was wrong value", a.CityID, x.ID)
		}
	}
}

func testAirportsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAirportsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AirportSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAirportsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Airports().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	airportDBTypes = map[string]string{`ID`: `INTEGER`, `AirportID`: `BIGINT`, `Name`: `VARCHAR(100)`, `CityID`: `BIGINT`}
	_              = bytes.MinRead
)

func testAirportsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(airportPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(airportAllColumns) == len(airportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Airports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, airportDBTypes, true, airportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAirportsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(airportAllColumns) == len(airportPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Airport{}
	if err = randomize.Struct(seed, o, airportDBTypes, true, airportColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Airports().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, airportDBTypes, true, airportPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Airport struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(airportAllColumns, airportPrimaryKeyColumns) {
		fields = airportAllColumns
	} else {
		fields = strmangle.SetComplement(
			airportAllColumns,
			airportPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AirportSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}
