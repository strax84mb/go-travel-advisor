// Code generated by MockGen. DO NOT EDIT.
// Source: internal/users/service.go

// Package servicemocks is a generated GoMock package.
package servicemocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	database "gitlab.strale.io/go-travel/internal/database"
)

// MockiUserRepository is a mock of iUserRepository interface.
type MockiUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockiUserRepositoryMockRecorder
}

// MockiUserRepositoryMockRecorder is the mock recorder for MockiUserRepository.
type MockiUserRepositoryMockRecorder struct {
	mock *MockiUserRepository
}

// NewMockiUserRepository creates a new mock instance.
func NewMockiUserRepository(ctrl *gomock.Controller) *MockiUserRepository {
	mock := &MockiUserRepository{ctrl: ctrl}
	mock.recorder = &MockiUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiUserRepository) EXPECT() *MockiUserRepositoryMockRecorder {
	return m.recorder
}

// FindByID mocks base method.
func (m *MockiUserRepository) FindByID(id int64, loadUserRoles bool) (database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id, loadUserRoles)
	ret0, _ := ret[0].(database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockiUserRepositoryMockRecorder) FindByID(id, loadUserRoles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockiUserRepository)(nil).FindByID), id, loadUserRoles)
}

// FindByUsername mocks base method.
func (m *MockiUserRepository) FindByUsername(username string, loadUserRoles bool) (database.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUsername", username, loadUserRoles)
	ret0, _ := ret[0].(database.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUsername indicates an expected call of FindByUsername.
func (mr *MockiUserRepositoryMockRecorder) FindByUsername(username, loadUserRoles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUsername", reflect.TypeOf((*MockiUserRepository)(nil).FindByUsername), username, loadUserRoles)
}

// MockiSecurityService is a mock of iSecurityService interface.
type MockiSecurityService struct {
	ctrl     *gomock.Controller
	recorder *MockiSecurityServiceMockRecorder
}

// MockiSecurityServiceMockRecorder is the mock recorder for MockiSecurityService.
type MockiSecurityServiceMockRecorder struct {
	mock *MockiSecurityService
}

// NewMockiSecurityService creates a new mock instance.
func NewMockiSecurityService(ctrl *gomock.Controller) *MockiSecurityService {
	mock := &MockiSecurityService{ctrl: ctrl}
	mock.recorder = &MockiSecurityServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiSecurityService) EXPECT() *MockiSecurityServiceMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockiSecurityService) GenerateJWT(ctx context.Context, user database.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockiSecurityServiceMockRecorder) GenerateJWT(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockiSecurityService)(nil).GenerateJWT), ctx, user)
}
